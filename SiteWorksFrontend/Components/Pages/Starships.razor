@page "/starships"
@using Dtos.External.StarWarsApi
@using ServiceLayer.StarWars
@using MudBlazor

<PageTitle>Starships</PageTitle>

<h1>Starships</h1>

<MudTextField T="string?" Value="_searchValue" ValueChanged="@(s => OnSearchChanged(s))" Label="Standard" Variant="Variant.Text"></MudTextField>

<TelerikGrid Data="@_starShips"
    Pageable="true"
    Sortable="true"
    FilterMode="@GridFilterMode.FilterRow"
    @ref="_grid"
>
    <GridColumns>
        <GridColumn Field="@nameof(SwApiStarship.Name)" />
        <GridColumn Field="@nameof(SwApiStarship.CargoCapacity)" Title="Cargo Capacity">
            <Template>
                @{
                    SwApiStarship item = (SwApiStarship)context;
                    <span>@FormatSwApiNumber(item.CargoCapacity)</span>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(SwApiStarship.Crew)">
            <Template>
                @{
                SwApiStarship item = (SwApiStarship)context;
                <span>@FormatSwApiNumber(item.Crew)</span>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(SwApiStarship.Model)" />
        <GridColumn Field="@nameof(SwApiStarship.HyperdriveRating)" Title="Hyperdrive Rating" />
    </GridColumns>
</TelerikGrid>


<div style="margin-top: 20px">
    <TelerikButton OnClick="GetData">Reload Data</TelerikButton>
</div>

@code {
    [Inject]
    private StarWarsService StarWarsService { get; set; }
    
    private TelerikGrid<SwApiStarship>? _grid;

    private List<SwApiStarship> _starShips = [];

    private string? _searchValue = null;

    private void OnSearchChanged(string? input)
    {
        _searchValue = input;
        InvokeAsync(GetData);
    }

    private async Task GetData()
    {
        _starShips = [];
        _starShips = await StarWarsService.SearchStarships(_searchValue);
        _grid?.Rebind();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        await base.OnInitializedAsync();
    }
    
    private string FormatSwApiNumber(SwApiNumber number)
    {
        if(number is SwApiSingleNumber singleNumber)
        {
            return singleNumber.Value.ToString("N0");
        }

        if(number is SwApiNumberRange numberRange)
        {
            return $"{numberRange.Start:N0} - {numberRange.End:N0}";
        }

        return "n/a";
    }

}